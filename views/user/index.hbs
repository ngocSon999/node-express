<div class="d-flex justify-content-between align-items-center mb-4">
  <h3 class="m-0">{{t 'user.management'}}</h3>
  {{#if (hasPermission user 'create user')}}
  <a class="btn btn-primary btn-sm" href="{{ routes 'usercreate' }}">{{t 'user.createNew'}}</a>
  {{/if}}
</div>

<div class="table-responsive">
    <table id="userTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-light">
            <tr>
                <th class="text-center">ID</th>
                <th>{{t 'user.avatar'}}</th>
                <th>{{t 'user.name'}}</th>
                <th>{{t 'user.email'}}</th>
                <th>{{t 'user.phone'}}</th>
                <th>{{t 'user.createdAt'}}</th>
                <th>{{t 'user.roles'}}</th>
                <th class="text-center">{{t 'common.actions'}}</th>
            </tr>
        </thead>
        <tbody>
          <tr>
              <td colspan="6" class="text-center">
                  <div class="py-4">
                      <div class="spinner-border text-primary" role="status">
                          <span class="visually-hidden">{{t 'common.loading'}}...</span>
                      </div>
                      <div class="mt-2">{{t 'common.loading'}}...</div>
                  </div>
              </td>
          </tr>
      </tbody>
    </table>
</div>

<script>
    function initializeDataTable() {
       const table = $('#userTable');
        if ($.fn.DataTable.isDataTable(table)) {
            table.DataTable().destroy();
        }

        dataTable = table.DataTable({
            processing: false,
            serverSide: false,
            deferRender: true,
            language: {
                processing: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>'
            },
            ajax: {
                url: '/api/v1/user',
                 type: 'GET',
                 beforeSend: function() {
                     table.addClass('loading');
                 },
                 dataSrc: function(json) {
                     table.removeClass('loading');
                     if (!json || !json.success) {
                         if (json && json.message === 'Unauthorized') {
                             window.location.href = '/admin/login';
                             return [];
                         }
                         showAlert('{{t "error.500"}}', 'error');
                         return [];
                     }
                     return json.data || [];
                 },
                 error: function(xhr, error, thrown) {
                     table.removeClass('loading');
                     if (xhr.status === 401) {
                         window.location.href = '/admin/login';
                         return [];
                     }
                     console.error('DataTables error:', error);
                     showAlert('{{t "error.500"}}', 'error');
                     return [];
                 }
             },
            columns: [
                { 
                    data: 'id',
                    className: 'text-center'
                },
                { 
                    data: 'avatar',
                    render: function(data) {
                        return data ? 
                            `<img src="${data}" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;">` :
                            `<div class="rounded-circle bg-secondary d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;"><i class="bi bi-person text-white"></i></div>`;
                    }
                },
                { 
                    data: 'name',
                    render: function(data) {
                        return data ? `<span class="fw-medium">${data}</span>` : '-';
                    }
                },
                { 
                    data: 'email',
                    render: function(data) {
                        return data ? `<code>${data}</code>` : '-';
                    }
                },
                { 
                    data: 'phone',
                    render: function(data) {
                        return data || '-';
                    }
                },
                { 
                    data: 'createdAt',
                    render: function(data) {
                        return data ? moment(data).format('DD/MM/YYYY HH:mm') : '-';
                    }
                },
                {
                  data: 'roles',
                  render: function(data) {
                    if (!data || !Array.isArray(data)) return '-';
                    return data.map(role =>
                      `<span class="badge bg-info me-1">${role.name}</span>`
                    ).join('<br>');
                  }
                },
                {
                    data: null,
                    className: 'text-center',
                    orderable: false,
                    render: function(data, type, row) {
                        let buttons = [];
                        
                        if (hasPermission(currentUser, 'read user')) {
                            buttons.push(`<a href="/admin/user/${row.id}" class="btn btn-info btn-sm" data-bs-toggle="tooltip" title="{{t 'common.detail'}}"><i class="bi bi-eye"></i></a>`);
                        }
                        
                        if (hasPermission(currentUser, 'update user')) {
                            buttons.push(`<a href="/admin/user/edit/${row.id}" class="btn btn-warning btn-sm ms-1" data-bs-toggle="tooltip" title="{{t 'common.edit'}}"><i class="bi bi-pencil"></i></a>`);
                        }
                        
                        if (hasPermission(currentUser, 'delete user')) {
                            buttons.push(`<button class="btn btn-danger btn-sm ms-1" onclick="deleteUser(${row.id})" data-bs-toggle="tooltip" title="{{t 'common.delete'}}"><i class="bi bi-trash"></i></button>`);
                        }
                        
                        return buttons.join('');
                    }
                }
            ],
            order: [[0, 'desc']],
            autoWidth: false,
            stateSave: true,
            stateDuration: 0,
            language: {
                url: `/js/datatable-i18n/${document.documentElement.lang}.json`
            },
            drawCallback: function() {
                // Khởi tạo lại tooltips
                const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltips.forEach(tooltip => {
                    new bootstrap.Tooltip(tooltip);
                });
                // Ẩn loading indicator
                $('.dataTables_processing').hide();
            },
            preDrawCallback: function() {
                // Hủy tooltips cũ
                const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltips.forEach(tooltip => {
                    const instance = bootstrap.Tooltip.getInstance(tooltip);
                    if (instance) {
                        instance.dispose();
                    }
                });
                // Hiển thị loading indicator
                $('.dataTables_processing').show();
            }
        });
    }

    async function deleteUser(id) {
        if (!confirm('{{t "user.deleteConfirm"}}')) return;

        try {
            const response = await fetch(`/api/v1/user/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.status === 401) {
                window.location.href = '/admin/login';
                return;
            }

            const data = await response.json();

            if (data.success) {
                showAlert('{{t "user.deleteSuccess"}}', 'success');
                // Xóa cache cho user đã bị xóa
                clearPermissionCache(id);
                // Reload DataTable
                dataTable.ajax.reload();
            } else {
                showAlert(data.message || '{{t "user.deleteError"}}', 'error');
            }
        } catch (error) {
            console.error('Error deleting user:', {
                error,
                userId: id,
                stack: error.stack
            });
            showAlert('{{t "error.500"}}', 'error');
        }
    }
</script>
